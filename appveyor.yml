version: "5.1.0.{build}"

platform: Any CPU
configuration: Release
skip_tags: true
image: Visual Studio 2017

environment:
  BUILDWINRT: true
  USINGMONO: false
  SNKSECRET:
    secure: C8FL0UTKVN8YcMW1wdssabbkSWMIrpJTqgUNeI2NfQw=
  erlang_download_url: "http://erlang.org/download/otp_win64_19.3.exe"
  erlang_exe_path: "C:\\Users\\appveyor\\erlang_19.3.exe"
  erlang_home_dir: "C:\\Users\\appveyor\\erlang"
  erlang_erts_version: "erts-8.3"
  rabbitmq_version: 3.7.4
  rabbitmq_installer_download_url: "https://github.com/rabbitmq/rabbitmq-server/releases/download/v3.7.4/rabbitmq-server-3.7.4.exe"
  rabbitmq_installer_path: "C:\\Users\\appveyor\\rabbitmq-server-3.7.4.exe"

cache:
  - "%erlang_exe_path%"
  - "%rabbitmq_installer_path%"

install:
  - IF DEFINED SNKSECRET (nuget install secure-file -ExcludeVersion)
  - IF DEFINED SNKSECRET (secure-file\tools\secure-file -decrypt %APPVEYOR_BUILD_FOLDER%\rabbit.snk.enc -secret %SNKSECRET%) ELSE (ECHO This Is A Pull Request Build)
  - IF NOT DEFINED SNKSECRET (copy "rabbit.snk.prbuilds" "rabbit.snk") ELSE (ECHO Using The Release Key File)
  # List conents of C:\ to help debug caching of rabbitmq artifacts
  - DIR C:\

  - ps: $webclient=New-Object System.Net.WebClient

  - ECHO Downloading Erlang...
  - ps: if (-Not (Test-Path "$env:erlang_exe_path")) { $webclient.DownloadFile("$env:erlang_download_url", "$env:erlang_exe_path") } else { Write-Host "Found" $env:erlang_exe_path "in cache." }

  - ECHO Installing Erlang...
  - start /B /WAIT %erlang_exe_path% /S /D=%erlang_home_dir%
  - set ERLANG_HOME=%erlang_home_dir%

  - ECHO Downloading RabbitMQ...
  - ps: if (-Not (Test-Path "$env:rabbitmq_installer_path")) { $webclient.DownloadFile("$env:rabbitmq_installer_download_url", "$env:rabbitmq_installer_path") } else { Write-Host "Found" $env:rabbitmq_installer_path "in cache." }

  - ECHO Creating Erlang cookie files...
  - ps: '[System.IO.File]::WriteAllText("C:\Users\appveyor\.erlang.cookie", "RABBITMQ-DOTNET-CLIENT", [System.Text.Encoding]::ASCII)'
  - ps: '[System.IO.File]::WriteAllText("C:\Windows\System32\config\systemprofile\.erlang.cookie", "RABBITMQ-DOTNET-CLIENT", [System.Text.Encoding]::ASCII)'

  - ECHO Installing and starting RabbitMQ with default config...
  - start /B /WAIT %rabbitmq_installer_path% /S
  - ps: (Get-Service -Name RabbitMQ).Status

  - ECHO Waiting for epmd to report that RabbitMQ has started...
  - ps: 'C:\projects\rabbitmq-dotnet-client\testdata\wait-epmd.ps1'
  - ps: 'C:\projects\rabbitmq-dotnet-client\testdata\wait-rabbitmq.ps1'

  - ECHO Getting RabbitMQ status...
  - cmd /c "C:\Program Files\RabbitMQ Server\rabbitmq_server-%rabbitmq_version%\sbin\rabbitmqctl.bat" status

  - ECHO Setting RABBITMQ_RABBITMQCTL_PATH...
  - ps: |
      $regPath = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\RabbitMQ"
      if (Test-Path "HKLM:\SOFTWARE\Wow6432Node\") { $regPath = "HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\RabbitMQ" }
      $path = Split-Path -Parent (Get-ItemProperty $regPath "UninstallString").UninstallString
      $version = (Get-ItemProperty $regPath "DisplayVersion").DisplayVersion
      [Environment]::SetEnvironmentVariable("RABBITMQ_HOME", "$path\rabbitmq_server-$version", "Machine")
      $env:RABBITMQ_HOME = "$path\rabbitmq_server-$version"
      [Environment]::SetEnvironmentVariable("RABBITMQ_RABBITMQCTL_PATH", "$path\rabbitmq_server-$version\sbin\rabbitmqctl.bat", "Machine")
      $env:RABBITMQ_RABBITMQCTL_PATH = "$path\rabbitmq_server-$version\sbin\rabbitmqctl.bat"

build_script: 
    - cmd: .\build.bat

test_script:
    - cmd: .\run-test.bat

nuget:
  disable_publish_on_pr: true

branches:
    only:
      - master
      - stable
